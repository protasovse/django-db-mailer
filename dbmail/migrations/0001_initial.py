# Generated by Django 2.0 on 2018-01-31 11:48

import dbmail.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('mlo_auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Name')),
                ('api_key', models.CharField(max_length=32, unique=True, verbose_name='Api key')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail API',
                'verbose_name_plural': 'Mail API',
            },
        ),
        migrations.CreateModel(
            name='MailBaseTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('message', models.TextField(help_text='Basic template for mail messages. {{content}} tag for msg.', verbose_name='Body')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail base template',
                'verbose_name_plural': 'Mail base templates',
            },
        ),
        migrations.CreateModel(
            name='MailBcc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail Bcc',
                'verbose_name_plural': 'Mail Bcc',
            },
        ),
        migrations.CreateModel(
            name='MailCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True, verbose_name='Category')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail category',
                'verbose_name_plural': 'Mail categories',
            },
        ),
        migrations.CreateModel(
            name='MailFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('filename', models.FileField(upload_to=dbmail.models._upload_mail_file, verbose_name='File')),
            ],
            options={
                'verbose_name': 'Mail file',
                'verbose_name_plural': 'Mail files',
            },
        ),
        migrations.CreateModel(
            name='MailFromEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('email', models.CharField(help_text='For sms/tts/push you must specify name or number', max_length=75, unique=True, verbose_name='Email')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail from',
                'verbose_name_plural': 'Mail from',
            },
        ),
        migrations.CreateModel(
            name='MailFromEmailCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(max_length=50, verbose_name='Host')),
                ('port', models.PositiveIntegerField(verbose_name='Port')),
                ('username', models.CharField(blank=True, max_length=50, null=True, verbose_name='Username')),
                ('password', models.CharField(blank=True, max_length=50, null=True, verbose_name='Password')),
                ('use_tls', models.BooleanField(default=False, verbose_name='Use TLS')),
                ('fail_silently', models.BooleanField(default=False, verbose_name='Fail silently')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail auth settings',
                'verbose_name_plural': 'Mail auth settings',
            },
        ),
        migrations.CreateModel(
            name='MailGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Group name')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Mail group',
                'verbose_name_plural': 'Mail groups',
            },
        ),
        migrations.CreateModel(
            name='MailGroupEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Username')),
                ('email', models.CharField(help_text='For sms/tts you must specify number', max_length=75, verbose_name='Email')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='dbmail.MailGroup', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Mail group email',
                'verbose_name_plural': 'Mail group emails',
            },
        ),
        migrations.CreateModel(
            name='MailLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_sent', models.BooleanField(db_index=True, default=True, verbose_name='Is sent')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Error message')),
                ('num_of_retries', models.PositiveIntegerField(default=1, verbose_name='Number of retries')),
                ('log_id', models.CharField(db_index=True, editable=False, max_length=60, verbose_name='Log ID')),
                ('backend', models.CharField(choices=[('bot', 'dbmail.backends.bot'), ('mail', 'dbmail.backends.mail'), ('push', 'dbmail.backends.push'), ('sms', 'dbmail.backends.sms'), ('tts', 'dbmail.backends.tts')], db_index=True, default='mail', editable=False, max_length=25, verbose_name='Backend')),
                ('provider', models.CharField(blank=True, db_index=True, default=None, editable=False, max_length=250, null=True, verbose_name='Provider')),
            ],
            options={
                'verbose_name': 'Mail log',
                'verbose_name_plural': 'Mail logs',
            },
        ),
        migrations.CreateModel(
            name='MailLogEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=350, verbose_name='Recipient')),
                ('mail_type', models.CharField(choices=[('cc', 'CC'), ('bcc', 'BCC'), ('to', 'TO')], max_length=3, verbose_name='Mail type')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailLog')),
            ],
            options={
                'verbose_name': 'Mail log email',
                'verbose_name_plural': 'Mail log emails',
            },
        ),
        migrations.CreateModel(
            name='MailLogException',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Exception')),
                ('ignore', models.BooleanField(default=False, verbose_name='Ignore')),
            ],
            options={
                'verbose_name': 'Mail Exception',
                'verbose_name_plural': 'Mail Exception',
            },
        ),
        migrations.CreateModel(
            name='MailLogTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counter', models.PositiveIntegerField(default=0, verbose_name='Counter')),
                ('ip', models.GenericIPAddressField(verbose_name='IP')),
                ('ua', models.CharField(blank=True, max_length=350, null=True, verbose_name='User Agent')),
                ('ua_os', models.CharField(blank=True, max_length=100, null=True, verbose_name='OS')),
                ('ua_os_version', models.CharField(blank=True, max_length=100, null=True, verbose_name='OS version')),
                ('ua_dist', models.CharField(blank=True, max_length=20, null=True, verbose_name='Dist name')),
                ('ua_dist_version', models.CharField(blank=True, max_length=100, null=True, verbose_name='Dist version')),
                ('ua_browser', models.CharField(blank=True, max_length=100, null=True, verbose_name='Browser')),
                ('ua_browser_version', models.CharField(blank=True, max_length=20, null=True, verbose_name='Browser version')),
                ('ip_area_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Area code')),
                ('ip_city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('ip_country_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country code')),
                ('ip_country_code3', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country code3')),
                ('ip_country_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country name')),
                ('ip_dma_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Dma code')),
                ('ip_latitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='Latitude')),
                ('ip_longitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='Longitude')),
                ('ip_postal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Postal code')),
                ('ip_region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Region')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is read')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('mail_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailLog', verbose_name='Log')),
            ],
            options={
                'verbose_name': 'Mail Tracking',
                'verbose_name_plural': 'Mail Tracking',
            },
        ),
        migrations.CreateModel(
            name='MailSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=350, null=True)),
                ('backend', models.CharField(choices=[('dbmail.backends.mail', 'MailBox'), ('dbmail.backends.push', 'Push'), ('dbmail.backends.sms', 'SMS'), ('dbmail.backends.tts', 'TTS'), ('dbmail.backends.bot', 'BOT')], default='dbmail.backends.mail', max_length=50, verbose_name='Backend')),
                ('start_hour', models.CharField(default='00:00', max_length=5, verbose_name='Start hour')),
                ('end_hour', models.CharField(default='23:59', max_length=5, verbose_name='End hour')),
                ('is_enabled', models.BooleanField(db_index=True, default=True, verbose_name='Is enabled')),
                ('is_checked', models.BooleanField(db_index=True, default=False, verbose_name='Is checked')),
                ('defer_at_allowed_hours', models.BooleanField(default=False, verbose_name='Defer at allowed hours')),
                ('address', models.CharField(db_index=True, help_text='Must be phone number/email/token', max_length=350, verbose_name='Address')),
                ('data', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mlo_auth.User', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Mail Subscription',
                'verbose_name_plural': 'Mail Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='MailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Template name')),
                ('subject', models.CharField(max_length=100, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Body')),
                ('slug', models.SlugField(help_text='Unique slug to use in code.', unique=True, verbose_name='Slug')),
                ('num_of_retries', models.PositiveIntegerField(default=1, verbose_name='Number of retries')),
                ('priority', models.SmallIntegerField(choices=[(0, 'High'), (3, 'Medium'), (6, 'Low'), (9, 'Deferred')], default=6, verbose_name='Priority')),
                ('is_html', models.BooleanField(default=True, help_text='For sms/tts/push must be text not html', verbose_name='Is html')),
                ('is_admin', models.BooleanField(default=False, verbose_name='For admin')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('enable_log', models.BooleanField(default=True, verbose_name='Logging enabled')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('context_note', models.TextField(blank=True, help_text='This is simple note field for context variables with description.', null=True, verbose_name='Context note')),
                ('interval', models.PositiveIntegerField(blank=True, help_text='\n            Specify interval to send messages after sometime.\n            Interval must be set in the seconds.\n            ', null=True, verbose_name='Send interval')),
                ('base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailBaseTemplate', verbose_name='Basic template')),
                ('bcc_email', models.ManyToManyField(blank=True, help_text='Blind carbon copy', to='dbmail.MailBcc', verbose_name='Bcc')),
                ('category', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailCategory', verbose_name='Category')),
                ('from_email', models.ForeignKey(blank=True, default=None, help_text='If not specified, then used default.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbmail.MailFromEmail', verbose_name='Message from')),
            ],
            options={
                'verbose_name': 'Mail template',
                'verbose_name_plural': 'Mail templates',
            },
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('signal', models.CharField(choices=[('pre_save', 'pre_save'), ('post_save', 'post_save'), ('pre_delete', 'pre_delete'), ('post_delete', 'post_delete'), ('m2m_changed', 'm2m_changed')], default='post_save', max_length=15, verbose_name='Signal')),
                ('rules', models.TextField(blank=True, default='{{ instance.email }}', help_text='Template should return email to send message. Example:{% if instance.is_active %}{{ instance.email }}{% endif %}.You can return a multiple emails separated by commas.', null=True, verbose_name='Rules')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('receive_once', models.BooleanField(default=True, help_text='Signal will be receive and send once for new db row.', verbose_name='Receive once')),
                ('interval', models.PositiveIntegerField(blank=True, help_text='Specify interval to send messages after sometime. That very helpful for mailing on enterprise products.Interval must be set in the seconds.', null=True, verbose_name='Send interval')),
                ('update_model', models.BooleanField(default=False, help_text='\n            If you are using interval and want to update object state,\n            you can use this flag and refer to the variable\n            {{current_instance}}\n            ', verbose_name='Update model state')),
                ('group', models.ForeignKey(blank=True, help_text='You can use group email or rules for recipients.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailGroup', verbose_name='Email group')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Model')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailTemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Mail signal',
                'verbose_name_plural': 'Mail signals',
            },
        ),
        migrations.CreateModel(
            name='SignalDeferredDispatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('args', models.TextField()),
                ('kwargs', models.TextField()),
                ('params', models.TextField()),
                ('eta', models.DateTimeField(db_index=True)),
                ('done', models.NullBooleanField(default=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SignalLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_pk', models.BigIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbmail.Signal')),
            ],
            options={
                'verbose_name': 'Signal log',
                'verbose_name_plural': 'Signal logs',
            },
        ),
        migrations.AlterIndexTogether(
            name='signaldeferreddispatch',
            index_together={('eta', 'done')},
        ),
        migrations.AddField(
            model_name='maillog',
            name='error_exception',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailLogException', verbose_name='Exception'),
        ),
        migrations.AddField(
            model_name='maillog',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailTemplate', verbose_name='Template'),
        ),
        migrations.AddField(
            model_name='maillog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mlo_auth.User', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='mailfromemail',
            name='credential',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbmail.MailFromEmailCredential', verbose_name='Auth credentials'),
        ),
        migrations.AddField(
            model_name='mailfile',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='dbmail.MailTemplate', verbose_name='Template'),
        ),
        migrations.AlterUniqueTogether(
            name='mailgroupemail',
            unique_together={('email', 'group')},
        ),
    ]
